from PyQt4 import QtCore, QtGui
import sys, time
 
class mythread(QtCore.QThread):
    
    total = QtCore.pyqtSignal(object)
    update = QtCore.pyqtSignal()
    
    def __init__(self, parent, n):
        super(mythread, self).__init__(parent)
        self.n = n
 
    def run(self):
        self.total.emit(self.n)
        i = 0
        while (i<self.n):
            if (time.time() % 1==0):
                i+=1
                #print str(i)
                self.update.emit()
 
# create the dialog for zoom to point
class progress(QtGui.QProgressBar):
    
    def __init__(self, parent=None): 
        super(progress, self).__init__(parent)
        # Set up the user interface from Designer. 
        self.setValue(0)
        
        self.thread = mythread(self, 3)

        self.thread.total.connect(self.setMaximum)
        self.thread.update.connect(self.update)
        self.thread.finished.connect(self.close)
        
        self.n = 0
        self.thread.start()
        
    def update(self):
        self.n += 1
        print self.n
        self.setValue(self.n)
 
if __name__=="__main__":
    app = QtGui.QApplication([])
    progressWidget = progress()
    progressWidget.move(300, 300)
    progressWidget.show()
    sys.exit(app.exec_())





#!/usr/bin/env python
"""This is a short program to have an external program grab data for me and get displayed without blocking the whole program"""
from PyQt4 import QtGui,QtCore
import sys
class TerminalViewer(QtGui.QWidget):
	def __init__(self,parent=None):
		QtGui.QWidget.__init__(self,parent)
		self.Label = QtGui.QLabel("Waiting for Something",self)
		self.DataCollector = TerminalX(self)
		self.connect(self.DataCollector,QtCore.SIGNAL("Activated ( QString ) "), self.Activated)
		self.DataCollector.start()
	def Activated(self,newtext):
		self.Label.setText(newtext)
	def closeEvent(self,e):
		e.accept()
		app.exit()

class TerminalX(QtCore.QThread):
	def __init__(self,parent=None):
		QtCore.QThread.__init__(self,parent)
		self.test = ''
	def run(self):
		while self.test != 'q':
			self.test = raw_input('enter data: ')
			self.emit(QtCore.SIGNAL("Activated( QString )"),self.test)

app = QtGui.QApplication(sys.argv)
qb = TerminalViewer()
qb.show()
sys.exit(app.exec_())



*** Error in `python': free(): invalid next size (fast): 0x0000000001f0c640 ***
